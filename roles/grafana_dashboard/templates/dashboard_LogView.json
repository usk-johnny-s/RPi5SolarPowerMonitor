{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": false,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": 8,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "description": "",
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 13,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "",
        "mode": "markdown"
      },
      "pluginVersion": "11.2.1",
      "title": "ViewLog",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 2,
          "displayName": "${__field.name}",
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-green",
                "value": null
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "pv:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "pv:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "pv:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "pv"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "battery:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "battery:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "battery:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "battery"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "load:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "load:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "load:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "load"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 1
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": false,
          "sortBy": "Name",
          "sortDesc": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\ntmean0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"pv_voltage_x10\" or r._field == \"battery_voltage_x10\" or r._field == \"load_voltage_x10\" )\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 10.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_voltage_x10\")], v:\":\") }))\r\n\r\ntmean1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"total_voltage_x100\" )\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [r.device], v:\":\") }))\r\n\r\ntmax0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"pv_voltage_x10\" or r._field == \"battery_voltage_x10\" or r._field == \"load_voltage_x10\" )\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 10.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_voltage_x10\"),\"max\"], v:\":\") }))\r\n\r\ntmax1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"total_voltage_x100\" )\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [r.device,\"max\"], v:\":\") }))\r\n\r\ntmin0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"pv_voltage_x10\" or r._field == \"battery_voltage_x10\" or r._field == \"load_voltage_x10\" )\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value) / 10.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_voltage_x10\"),\"min\"], v:\":\") }))\r\n\r\ntmin1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"total_voltage_x100\" )\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [r.device,\"min\"], v:\":\") }))\r\n\r\nunion(tables: [tmean0, tmax0, tmin0, tmean1, tmax1, tmin1])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "VOLTAGE",
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "displayName": "${__field.name}",
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-green",
                "value": null
              }
            ]
          },
          "unit": "amph"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}:nom"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}:nom"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    5,
                    15
                  ],
                  "fill": "dash"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 1
      },
      "id": 3,
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": false,
          "sortBy": "Name",
          "sortDesc": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\ntmean0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"remain_capacity_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [r.device], v:\":\") }))\r\n\r\ntmax0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"remain_capacity_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [r.device,\"max\"], v:\":\") }))\r\n\r\ntmin0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"remain_capacity_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [r.device,\"min\"], v:\":\") }))\r\n\r\ntlast1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"last\")\r\n  |> filter(fn: (r) => r._field == \"nominal_capacity_x100\" )\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [r.device,\"nom\"], v:\":\") }))\r\n\r\nunion(tables: [tmean0, tmax0, tmin0, tlast1])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "CAPACITY",
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "displayName": "${__field.name}",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#37872D",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "charge"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "Boost": {
                        "color": "light-yellow",
                        "index": 5
                      },
                      "Charging": {
                        "color": "red",
                        "index": 1
                      },
                      "Equalizing": {
                        "color": "dark-orange",
                        "index": 3
                      },
                      "Float": {
                        "color": "dark-yellow",
                        "index": 4
                      },
                      "Limit": {
                        "color": "dark-blue",
                        "index": 6
                      },
                      "Mppt": {
                        "color": "dark-red",
                        "index": 2
                      },
                      "NoCharge": {
                        "color": "dark-green",
                        "index": 0
                      }
                    },
                    "type": "value"
                  },
                  {
                    "options": {
                      "pattern": "undef:.*",
                      "result": {
                        "color": "dark-purple",
                        "index": 7
                      }
                    },
                    "type": "regex"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "load"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "off": {
                        "color": "dark-green",
                        "index": 0
                      }
                    },
                    "type": "value"
                  },
                  {
                    "options": {
                      "pattern": "ON:.*",
                      "result": {
                        "color": "dark-red",
                        "index": 1
                      }
                    },
                    "type": "regex"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 12,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "auto",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "query": "import \"bitwise\"\r\nimport \"strings\"\r\n\r\nnibble2hex = (v) => if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 0) then \"0\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 1) then \"1\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 2) then \"2\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 3) then \"3\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 4) then \"4\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 5) then \"5\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 6) then \"6\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 7) then \"7\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 8) then \"8\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 9) then \"9\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 10) then \"A\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 11) then \"B\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 12) then \"C\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 13) then \"D\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 14) then \"E\" else \"F\"\r\nbyte2hex = (v) => strings.joinStr(arr: [\"0x\",nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 4))),nibble2hex(v: v)], v:\"\")\r\nword2hex = (v) => strings.joinStr(arr: [\"0x\",nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 12))),nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 8))),nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 4))),nibble2hex(v: v)], v:\"\")\r\n\r\nstatus = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"last\")\r\n  |> filter(fn: (r) => r._field == \"load_status\" or r._field == \"charge_status\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n\r\ntab0 = status\r\n  |> filter(fn: (r) => r._field == \"load_status\")\r\n  |> map(fn: (r) => ({ r with _value: if r._value==0 then \"off\" else strings.joinStr(arr: [\"ON:\",byte2hex(v:r._value)], v:\"\"), _field: strings.trimSuffix(v: r._field, suffix: \"_status\")}))\r\n\r\ntab1 = status\r\n  |> filter(fn: (r) => r._field == \"charge_status\")\r\n  |> map(fn: (r) => ({ r with _value: if r._value==0 then \"NoCharge\" else if r._value==1 then \"Charging\" else if r._value==2 then \"Mppt\" else if r._value==3 then \"Equalizing\" else if r._value==4 then \"Float\" else if r._value==5 then \"Boost\"  else if r._value==6 then \"Limit\" else strings.joinStr(arr: [\"undef\",string(v:r._value)], v:\":\"), _field: strings.trimSuffix(v: r._field, suffix: \"_status\")}))\r\n\r\nunion(tables: [tab0, tab1])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "STATUS",
      "type": "state-timeline"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 3,
          "displayName": "${__field.name}",
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-green",
                "value": null
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#00:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}#00:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#00:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#00"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#01:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}#01:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#01:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#01"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#02:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}#02:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 22
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#02:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#02"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#03:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}#03:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#03:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#03"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#00:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}#00:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#00:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#00"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#01:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}#01:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#01:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#01"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#02:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}#02:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#02:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#02"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#03:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}#03:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#03:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#03"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 8
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": false,
          "sortBy": "Name",
          "sortDesc": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\ntmean0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"cell_voltage#00_x1000\" or r._field == \"cell_voltage#01_x1000\" or r._field == \"cell_voltage#02_x1000\" or r._field == \"cell_voltage#03_x1000\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/1000.0, _field: strings.joinStr(arr: [r.device,strings.trimSuffix(v: strings.trimPrefix(v: r._field, prefix: \"cell_voltage\"), suffix: \"_x1000\")], v:\"\") }))\r\n\r\ntmax0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"cell_voltage#00_x1000\" or r._field == \"cell_voltage#01_x1000\" or r._field == \"cell_voltage#02_x1000\" or r._field == \"cell_voltage#03_x1000\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/1000.0, _field: strings.joinStr(arr: [r.device,strings.trimSuffix(v: strings.trimPrefix(v: r._field, prefix: \"cell_voltage\"), suffix: \"_x1000\"),\":max\"], v:\"\") }))\r\n\r\ntmin0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"cell_voltage#00_x1000\" or r._field == \"cell_voltage#01_x1000\" or r._field == \"cell_voltage#02_x1000\" or r._field == \"cell_voltage#03_x1000\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/1000.0, _field: strings.joinStr(arr: [r.device,strings.trimSuffix(v: strings.trimPrefix(v: r._field, prefix: \"cell_voltage\"), suffix: \"_x1000\"),\":min\"], v:\"\") }))\r\n\r\nunion(tables: [tmean0, tmax0, tmin0])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "CELL VOLTAGE",
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-green",
            "mode": "palette-classic-by-name"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "displayName": "${__field.name}",
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-purple",
                "value": null
              },
              {
                "color": "light-green",
                "value": 13
              },
              {
                "color": "dark-red",
                "value": 20
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "battery_max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "battery_min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "battery_min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "battery"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "load_max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "load_min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "load_min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "load"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}_max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "current_{{ble_batttery_2}}_min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}_min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}_max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}_min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}_min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 12
      },
      "id": 2,
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": false,
          "sortBy": "Name",
          "sortDesc": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\ntmean0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"battery_current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_current_x100\")], v:\"_\") }))\r\n\r\ntmax0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"battery_current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_current_x100\"),\"max\"], v:\"_\") }))\r\n\r\ntmin0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"battery_current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value)/ 100.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_current_x100\"),\"min\"], v:\"_\") }))\r\n\r\ntmean1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"load_current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: -r._value)/ 100.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_current_x100\")], v:\"_\") }))\r\n\r\ntmax1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"load_current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: -r._value)/ 100.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_current_x100\"),\"max\"], v:\"_\") }))\r\n\r\ntmin1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"load_current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: -r._value)/ 100.0, _field: strings.joinStr(arr: [strings.trimSuffix(v: r._field, suffix: \"_current_x100\"),\"min\"], v:\"_\") }))\r\n\r\ntmean2 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: -r._value)/ 100.0, _field: strings.joinStr(arr: [r.device], v:\"_\") }))\r\n\r\ntmax2 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: -r._value)/ 100.0, _field: strings.joinStr(arr: [r.device,\"max\"], v:\"_\") }))\r\n\r\ntmin2 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"current_x100\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: float(v: -r._value)/ 100.0, _field: strings.joinStr(arr: [r.device,\"min\"], v:\"_\") }))\r\n\r\nunion(tables: [tmean0, tmax0, tmin0, tmean1, tmax1, tmin1, tmean2, tmax2, tmin2])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "Current",
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "displayName": "${__field.name}",
          "mappings": [
            {
              "options": {
                "ON": {
                  "color": "dark-red",
                  "index": 1
                },
                "off": {
                  "color": "dark-green",
                  "index": 0
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 17
      },
      "id": 7,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "auto",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "query": "import \"bitwise\"\r\nimport \"strings\"\r\n\r\nbor = (tables=<-, column=\"_value\") => tables\r\n    |> reduce(identity: {tmp: uint(v: 0),}, fn: (r, accumulator) => ({tmp: bitwise.uor(a: accumulator.tmp, b: uint(v: r._value)), }),)\r\n    |> rename(columns: {tmp: \"_value\"})\r\n\r\nequilibrium = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"Bor\")\r\n  |> filter(fn: (r) => r._field == \"equilibrium\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: bor, createEmpty: false)\r\n\r\ntab0 = equilibrium\r\n  |> map(fn: (r) => ({ r with _value: if (bitwise.uand(a: uint(v: r._value), b: uint(v: 1)) != uint(v: 0)) then \"ON\" else \"off\", _field: strings.joinStr(arr: [r.device,\"#00\"], v:\"\")}))\r\n\r\ntab1 = equilibrium\r\n  |> map(fn: (r) => ({ r with _value: if (bitwise.uand(a: uint(v: r._value), b: uint(v: 2)) != uint(v: 0)) then \"ON\" else \"off\", _field: strings.joinStr(arr: [r.device,\"#01\"], v:\"\")}))\r\n\r\ntab2 = equilibrium\r\n  |> map(fn: (r) => ({ r with _value: if (bitwise.uand(a: uint(v: r._value), b: uint(v: 4)) != uint(v: 0)) then \"ON\" else \"off\", _field: strings.joinStr(arr: [r.device,\"#02\"], v:\"\")}))\r\n\r\ntab3 = equilibrium\r\n  |> map(fn: (r) => ({ r with _value: if (bitwise.uand(a: uint(v: r._value), b: uint(v: 8)) != uint(v: 0)) then \"ON\" else \"off\", _field: strings.joinStr(arr: [r.device,\"#03\"], v:\"\")}))\r\n\r\nunion(tables: [tab0, tab1, tab2, tab3])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "EQUILIBRIUM",
      "type": "state-timeline"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "displayName": "${__field.name}",
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-green",
                "value": null
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_controller_1}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_controller_1}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_controller_1}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_controller_1}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 21
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": false,
          "sortBy": "Name",
          "sortDesc": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\ntmean0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"state_of_charge\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: strings.joinStr(arr: [r.device], v:\"\") }))\r\n\r\ntmax0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"state_of_charge\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: strings.joinStr(arr: [r.device,\":max\"], v:\"\") }))\r\n\r\ntmin0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"state_of_charge\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: strings.joinStr(arr: [r.device,\":min\"], v:\"\") }))\r\n\r\nunion(tables: [tmean0, tmax0, tmin0])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "STATE OF CHARGE",
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "displayName": "${__field.name}",
          "fieldMinMax": false,
          "mappings": [
            {
              "options": {
                "0x0000": {
                  "color": "dark-green",
                  "index": 0
                }
              },
              "type": "value"
            },
            {
              "options": {
                "pattern": "0x.*",
                "result": {
                  "color": "dark-red",
                  "index": 1
                }
              },
              "type": "regex"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 12,
        "x": 12,
        "y": 23
      },
      "id": 9,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "auto",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "query": "import \"bitwise\"\r\nimport \"strings\"\r\n\r\nbor = (tables=<-, column=\"_value\") => tables\r\n    |> reduce(identity: {tmp: uint(v: 0),}, fn: (r, accumulator) => ({tmp: bitwise.uor(a: accumulator.tmp, b: uint(v: r._value)), }),)\r\n    |> rename(columns: {tmp: \"_value\"})\r\n\r\nnibble2hex = (v) => if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 0) then \"0\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 1) then \"1\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 2) then \"2\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 3) then \"3\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 4) then \"4\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 5) then \"5\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 6) then \"6\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 7) then \"7\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 8) then \"8\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 9) then \"9\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 10) then \"A\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 11) then \"B\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 12) then \"C\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 13) then \"D\" else if bitwise.uand(a: uint(v: v), b: uint(v: 15)) == uint(v: 14) then \"E\" else \"F\"\r\nbyte2hex = (v) => strings.joinStr(arr: [\"0x\",nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 4))),nibble2hex(v: v)], v:\"\")\r\nword2hex = (v) => strings.joinStr(arr: [\"0x\",nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 12))),nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 8))),nibble2hex(v: bitwise.urshift(a:uint(v: v) ,b: uint(v: 4))),nibble2hex(v: v)], v:\"\")\r\n\r\nstat = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"Bor\")\r\n  |> filter(fn: (r) => r._field == \"alarm\" or r._field == \"protection_status\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: bor, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: word2hex(v: r._value), _field: r.device}))\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")\r\n",
          "refId": "A"
        }
      ],
      "title": "ALERT",
      "type": "state-timeline"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "displayName": "${__field.name}",
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-green",
                "value": null
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_controller_1}}:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_controller_1}}:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_controller_1}}:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_controller_1}}"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#00:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}#00:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#00:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#00"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#01:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}#01:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 16
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#01:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#01"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#02:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_2}}#02:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#02:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_2}}#02"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#00:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}#00:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#00:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#00"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#01:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}#01:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#01:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#01"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#02:max"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.fillBelowTo",
                "value": "{{ble_batttery_1}}#02:min"
              },
              {
                "id": "custom.fillOpacity",
                "value": 25
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#02:min"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "{{ble_batttery_1}}#02"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 26
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": false,
          "sortBy": "Name",
          "sortDesc": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "hide": false,
          "query": "import \"strings\"\r\n\r\ntmean0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"controller_temperature_celsius\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: strings.joinStr(arr: [r.device], v:\"\") }))\r\n\r\ntmean1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"mean\")\r\n  |> filter(fn: (r) => r._field == \"ntc#00\" or r._field == \"ntc#01\" or r._field == \"ntc#02\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (float(v: r._value)-2731.0)/10.0, _field: strings.joinStr(arr: [r.device,strings.trimPrefix(v: r._field, prefix: \"ntc\")], v:\"\") }))\r\n\r\ntmax0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"controller_temperature_celsius\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: strings.joinStr(arr: [r.device,\":max\"], v:\"\") }))\r\n\r\ntmax1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"max\")\r\n  |> filter(fn: (r) => r._field == \"ntc#00\" or r._field == \"ntc#01\" or r._field == \"ntc#02\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (float(v: r._value)-2731.0)/10.0, _field: strings.joinStr(arr: [r.device,strings.trimPrefix(v: r._field, prefix: \"ntc\"),\":max\"], v:\"\") }))\r\n\r\ntmin0 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"controller_temperature_celsius\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: strings.joinStr(arr: [r.device,\":min\"], v:\"\") }))\r\n\r\ntmin1 = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"min\")\r\n  |> filter(fn: (r) => r._field == \"ntc#00\" or r._field == \"ntc#01\" or r._field == \"ntc#02\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _value: (float(v: r._value)-2731.0)/10.0, _field: strings.joinStr(arr: [r.device,strings.trimPrefix(v: r._field, prefix: \"ntc\"),\":min\"], v:\"\") }))\r\n\r\nunion(tables: [tmean0, tmax0, tmin0, tmean1, tmax1, tmin1])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "TEMPERATURE",
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": true,
        "type": "influxdb",
        "uid": "fdy97r5yzsk5cd"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "displayName": "${__field.name}",
          "mappings": [
            {
              "options": {
                "ON": {
                  "color": "dark-red",
                  "index": 1
                },
                "off": {
                  "color": "dark-green",
                  "index": 0
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 12,
        "y": 27
      },
      "id": 8,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "auto",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fdy97r5yzsk5cd"
          },
          "query": "import \"bitwise\"\r\nimport \"strings\"\r\n\r\nbor = (tables=<-, column=\"_value\") => tables\r\n    |> reduce(identity: {tmp: uint(v: 0),}, fn: (r, accumulator) => ({tmp: bitwise.uor(a: accumulator.tmp, b: uint(v: r._value)), }),)\r\n    |> rename(columns: {tmp: \"_value\"})\r\n\r\nfet_control = from(bucket: \"$rp\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"Bor\")\r\n  |> filter(fn: (r) => r._field == \"fet_control\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: bor, createEmpty: false)\r\n\r\ntab0 = fet_control\r\n  |> map(fn: (r) => ({ r with _value: if (bitwise.uand(a: uint(v: r._value), b: uint(v: 1)) != uint(v: 0)) then \"ON\" else \"off\", _field: strings.joinStr(arr: [r.device,\"#Charge\"], v:\"\")}))\r\n\r\ntab1 = fet_control\r\n  |> map(fn: (r) => ({ r with _value: if (bitwise.uand(a: uint(v: r._value), b: uint(v: 2)) != uint(v: 0)) then \"ON\" else \"off\", _field: strings.joinStr(arr: [r.device,\"#Discharge\"], v:\"\")}))\r\n\r\nunion(tables: [tab0, tab1])\r\n  |> sort(columns: [\"_field\"])\r\n  |> yield(name: \"a\")",
          "refId": "A"
        }
      ],
      "title": "FET",
      "type": "state-timeline"
    }
  ],
  "refresh": "1m",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "week",
          "value": "week"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "fdy97r5yzsk5cd"
        },
        "definition": "import \"types\"\r\nimport \"date\"\r\nstart = if types.isType(type:\"duration\", v: v.timeRangeStart) then time(v: int(v: v.timeRangeStart) + int(v: v.timeRangeStop) - int(v: now())) else time(v: int(v: v.timeRangeStart) - int(v: now()))\r\nstop = time(v: 0)\r\nfrom(bucket: \"forever\")\r\n  |> range(start: 1900-01-01T00:00:00Z, stop: 1970-01-01T00:00:00Z)\r\n  |> filter(fn: (r) => r._measurement == \"rp_config\")\r\n  |> filter(fn: (r) => r._field == \"rp\")\r\n  |> range(start: start, stop: stop)\r\n  |> first()",
        "hide": 2,
        "includeAll": false,
        "label": "Retension Policy",
        "multi": false,
        "name": "rp",
        "options": [],
        "query": {
          "maxDataPoints": 1,
          "query": "import \"types\"\r\nimport \"date\"\r\nstart = if types.isType(type:\"duration\", v: v.timeRangeStart) then time(v: int(v: v.timeRangeStart) + int(v: v.timeRangeStop) - int(v: now())) else time(v: int(v: v.timeRangeStart) - int(v: now()))\r\nstop = time(v: 0)\r\nfrom(bucket: \"forever\")\r\n  |> range(start: 1900-01-01T00:00:00Z, stop: 1970-01-01T00:00:00Z)\r\n  |> filter(fn: (r) => r._measurement == \"rp_config\")\r\n  |> filter(fn: (r) => r._field == \"rp\")\r\n  |> range(start: start, stop: stop)\r\n  |> first()",
          "refId": "InfluxVariableQueryEditor-VariableQuery"
        },
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {
    "hidden": false,
    "refresh_intervals": [
      "30s",
      "1m",
      "5m",
      "15m",
      "30m"
    ]
  },
  "timezone": "browser",
  "title": "LogView",
  "uid": "cdycwyjofrnr4c",
  "version": 1,
  "weekStart": ""
}